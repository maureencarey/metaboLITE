shiny::runApp()
log2(0.1)
log2(0)
log2(1)
log2(0.0000001)
log2(2)
log2(10)
log2(200)
log2(1000)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
system("ls")
system("pwd")
shiny::runApp()
shiny::runApp()
install.packages("igraph")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("rsbml")
install.packages("~/Downloads/libSBML_5.15.0.tar.gz", repos = NULL, type = "source")
library(libSBML)
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("rsbml")
source("https://bioconductor.org/biocLite.R")
biocLite("rsbml")
library(igraph)
library(libSBML)
library(rsbml)
library(shiny)
library(intergraph)
install.packages("intergraph")
library(GGally)
install.packages("GGally")
library(ggplot2)
runApp()
install.packages("sna")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/")
library(dplyr)
library(readr)
setwd("~/")
history=read_csv("history-kw.csv")
ggplot(data = history,aes(x = x,y = y)) +
geom path()
ggplot(data = history,aes(x = x,y = y))
history=read_csv("history-kw.csv")
setwd("~/")
history=read_csv("history-kw.csv")
View(history)
history=read_csv("history-kw.csv")
history[,1]
rownames(history) = history[,1]
history %>% `rownames<-`(history[,1])
history=read.csv("history-kw.csv")
View(history)
history=read.csv("history-kw.csv",row.names = 1)
View(history)
history=read.csv("history-kw.csv",row.names = 1,col.names = 1)
View(history)
history=read.csv("history-kw.csv",row.names = 1, col.names = V1)
history=read.csv("history-kw.csv",row.names = 1)
View(history)
history=read.csv("history-kw.csv",row.names = 1,col.names = seq(0,48,0.5))
View(history)
history=read.csv("history-kw.csv",row.names = 1,col.names = seq(0,24,0.5))
View(history)
history=read.csv("history-kw.csv",row.names = 1,col.names = paste(as.character(seq(0,24,0.5))))
View(history)
plot(history)
history=read.csv("history-kw.csv",row.names = 1,col.names = paste(as.character(seq(0,24,0.5))))
plot(history)
View(history)
plot(history$X0.5)
barplot(history)
View(history)
colnames(history)=as.character(seq(0,24,0.5))
history=read.csv("history-kw.csv",row.names = 1)
colnames(history)=as.character(seq(0,24,0.5))
colnames(history)=as.character(seq(0.5,24,0.5))
barplot(history)
setwd("~/")
history=read.csv("history-kw.csv",row.names = 1)
colnames(history)=as.character(seq(0.5,24,0.5))
plot(history)
View(history)
View(history)
plot(history[,1])
plot(history[1,])
plot(history[,1])
plot(history[,1],l=1)
lines(history[,1])
barplot(history[,1])
barplot(history)
history=as.matrix(history)
barplot(history)
barplot(t(history))
plot(t(history))
plot((history))
plot((history),type = "l")
setwd("~/")
history=read.csv("history-kw.csv",row.names = 1)
colnames(history)=as.character(seq(0.5,24,0.5))
history=as.matrix(history)
plot((history),type = "l")
plot((history[,1]),type = "l")
plot((history[,1]),type = "b")
matplot((history[,1]),type = "b")
matplot((history[,1]),type = "l")
matplot((history),type = "l")
a=as.data.frame(history)
plot(mean(history),type = "l")
mean(history)
plot(colMeans(history),type = "l")
seq(
from=as.POSIXct("2012-1-1 0:00", tz="UTC"),
to=as.POSIXct("2012-1-3 23:00", tz="UTC"),
by="hour"
)
seq(
from=as.POSIXct("0:00", tz="UTC"),
to=as.POSIXct("24:00", tz="UTC"),
by="hour"
)
plot(seq(0.5,24,0.5),colMeans(history),type = "l")
matplot(seq(0.5,24,0.5),(history),type = "l")
matplot(seq(0.5,24,0.5),history,type = "l")
matplot(seq(0.5,24,0.5),history,type = "l")
matplot(history,type = "l")
matplot(history[1:10,],type = "l")
matplot(history[1:2,],type = "l")
matplot(history[,1:10],type = "l")
sg <- sgolayfilt(history[,1])
install.packages("signal")
sg <- sgolayfilt(history[,1])
library(signal)
sg <- sgolayfilt(history[,1])
plot(sg)
plot(sg,type = "l")
plot(sg,type = "l",lwd = 2)
sg <- sgolayfilt(history[,1:10])
plot(sg,type = "l",lwd = 2)
sg <- sgolayfilt(history[1:10,])
plot(sg,type = "l",lwd = 2)
sg <- sgolayfilt(history[1,])
plot(sg,type = "l",lwd = 2)
plot(seq(0.5,24,0.5),sg,type = "l",lwd = 2)
plot(seq(0.5,24,0.5),colMeans(history),type = "l")
sg <- sgolayfilt(history[1,])
lines(seq(0.5,24,0.5),sg,type = "l",lwd = 2)
matplot(history[,1:10],type = "l")
matplot(history,type = "l")
matplot(seq(0.5,24,0.5),colMeans(history),type = "l")
sg <- sgolayfilt(history[1,])
lines(seq(0.5,24,0.5),sg,type = "l",lwd = 2)
sg <- sgolayfilt(history[1:10,])
lines(seq(0.5,24,0.5),sg,type = "l",lwd = 2)
sg <- sgolayfilt(history[1,])
lines(seq(0.5,24,0.5),sg,type = "l",lwd = 2)
colMeans(history
)
View(history)
plot(seq(0.5,24,0.5),sg,type = "l",lwd = 2,ylim = c(0,max(history)))
sg <- sgolayfilt(history[1,])
plot(seq(0.5,24,0.5),sg,type = "l",lwd = 2,ylim = c(0,max(history)))
lines(seq(0.5,24,0.5),colMeans(history),type = "l")
matplot(history,type = "l")
sg <- sgolayfilt(history[1,])
lines(seq(0.5,24,0.5),sg,type = "l",lwd = 2,ylim = c(0,max(history)))
lines(seq(0.5,24,0.5),history[1,],type = "l",lwd = 2,ylim = c(0,max(history)))
library(signal)
setwd("~/")
history=read.csv("history-kw.csv",row.names = 1)
colnames(history)=as.character(seq(0.5,24,0.5))
history=as.matrix(history)
matplot(history,type = "l")
lines(seq(0.5,24,0.5),colMeans(history),type = "l",lwd=2,col="red")
lines(seq(0.5,24,0.5),history[1,],type = "l",lwd = 2,ylim = c(0,max(history)))
recent = history[1:10,]
history = history[1:10,]
matplot(history,type = "l")
lines(seq(0.5,24,0.5),colMeans(history),type = "l",lwd=2,col="red")
sg <- sgolayfilt(history[1,])
lines(seq(0.5,24,0.5),history[1,],type = "l",lwd = 2,ylim = c(0,max(history)))
shiny::runApp()
system("gimme_wrapper.sh")
system(".gimme_wrapper.sh")
system("/.gimme_wrapper.sh")
setwd("~/Uczelnia/UVA/shinyapp/")
system("/.gimme_wrapper.sh")
system("bash gimme_wrapper.sh")
system("/.gimme_wrapper.sh")
system("bash gimme_wrapper.sh")
system("bash gimme_wrapper.sh")
ls
system("bash gimme_wrapper.sh")
gimme_fluxes = read.csv("gimme_fluxes.csv")
library(igraph)
library(libSBML)
library(rsbml)
library(shiny)
library(intergraph)
library(GGally)
library(ggplot2)
library(sna)
sbml_model = rsbml_read("data/toycon.xml")
toycon_graph = igraph.from.graphNEL(rsbml_graph(rsbml_read("data/toycon.xml"))
)
net = asNetwork(toycon_graph)
net$mel
i=1
net$mel[[i]][[3]][[2]]
net$mel[[i]]
names = unlist(net$val)[seq(2, length(unlist(net$val)), 2)]
names
net$val
net$gal
net$iel
net$oel
net$val
net$val[[1]]
net$val[[2]]
net$val[[2]][[2]]
net$val[[]][[2]]
net$val[[1:10]][[2]]
net$val[[2]][[2]]
net$val[[10]][[2]]
net$val[[1]][[2]]
net$val[[11]][[2]]
net$val
?lapply
unlist(net$val)
unlist(net$val)[1]
unlist(net$val)["vertex.names"]
names(unlist(net$val))
which(names(unlist(net$val))=="vertex.names")
unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]
unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]
grepl(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")],"^R")
grepl(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")],"^R*")
grepl(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")],"\^R\")
?grepl
grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")])
which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))
which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))
which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))
unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))]
unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))]
unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R"as.vector(),unlist(net$val)[which(names(unlist(net$val))=="vertex.names"))]))]
unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))]
as.vector(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))])
as.vector(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))])
system("bash gimme_wrapper.sh")
fluxes = read.csv("gimme_fluxes.csv")
View(fluxes)
read.csv("gimme_fluxes.csv",header = F)
fluxes = read.csv("gimme_fluxes.csv",header = F)
View(fluxes)
rownames(fluxes)
fluxes[1,]
fluxes[,1]
fluxes = read.csv("gimme_fluxes.csv",header = F, stringsAsFactors = F)
fluxes[,1]
which(fluxes[,1]) = names
names
reactions_names = as.vector(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))])        }
reactions_names = as.vector(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))])
reactions_names
which(fluxes[,1]) = reactions_names
which(fluxes[,1] == reactions_names)
which(fluxes[,1] == reactions_names[1])
which(fluxes[,1] == reactions_names[2])
length(fluxes)
dim(fluxes)
dim(fluxes)[1]
i=1
fluxes[which(fluxes[,1] == reactions_names[i]),2]
runApp()
runApp()
#Loading libraries
library(igraph)
library(libSBML)
library(rsbml)
library(shiny)
library(intergraph)
library(GGally)
library(ggplot2)
library(sna)
sbml_model = rsbml_read("data/toycon.xml")
toycon_graph = igraph.from.graphNEL(rsbml_graph(rsbml_read("data/toycon.xml"))
)
net = asNetwork(toycon_graph)
names = unlist(net$val)[seq(2, length(unlist(net$val)), 2)]
#Setting colors according to node class
colors = rep(isolate(input$color_metabolites), length(names))
colors[grep("R", names)] = isolate(input$color_reactions)
edges_names = names
for (i in seq(1, length(net$mel))) {
weights_edges = append(weights_edges, net$mel[[i]][[3]][[2]])
}
edgesize = weights_edges
edgesize = log10(weights_edges) + 0.25
weights_edges = c()
for (i in seq(1, length(net$mel))) {
weights_edges = append(weights_edges, net$mel[[i]][[3]][[2]])
}
edgesize = weights_edges
edgesize = log10(weights_edges) + 0.25
edgesize
reactions_names = as.vector(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))])
system("bash gimme_wrapper.sh")
fluxes = read.csv("gimme_fluxes.csv",header = F, stringsAsFactors = F)
for (i in seq(1,dim(fluxes)[1],1)){
weights_edges[i] = fluxes[which(fluxes[,1] == reactions_names[i]),2]
}
edgesize = weights_edges
fluxes[which(fluxes[,1] == reactions_names[i]),2]
fluxes[which(fluxes[,1] == reactions_names[1]),2]
fluxes[which(fluxes[,1] == reactions_names[2]),2]
fluxes[which(fluxes[,1] == reactions_names[3]),2]
dim(fluxes)[1]
fluxes[which(fluxes[,1] == reactions_names[12]),2]
fluxes[which(fluxes[,1] == reactions_names[11]),2]
fluxes[which(fluxes[,1] == reactions_names[10]),2]
fluxes[which(fluxes[,1] == reactions_names[9]),2]
runApp()
net$mel[[i]][[3]][[2]]
net$mel[[1]][[3]][[2]]
net$mel[[1]][[3]][[2]]
net$mel[[2]][[3]][[2]]
net$mel[[3]][[3]][[2]]
net$mel[[4]][[3]][[2]]
net$mel[[10]][[3]][[2]]
net$mel[[15]][[3]][[2]]
net$mel[[117]][[3]][[2]]
net$mel[[17]][[3]][[2]]
as.vector(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))])
unlist(net$val)
length(unlist(net$val))
as.vector(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]
)
length(as.vector(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")])
)
for (i in seq(1, length(net$mel))) {
weights_edges = append(weights_edges, net$mel[[i]][[3]][[2]])
}
edgesize = weights_edges
edgesize
length(net$mel)
runApp()
edges_names
edgesize
unlist(net$val)[which(names(unlist(net$val))=="vertex.names")
)
unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]
length(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")])
weights_edges = rep(0,length(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))
weithts
weights
weights_edges
length(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")])
length(weights_edges)
[which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))
which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))
#Loading libraries
library(igraph)
library(libSBML)
library(rsbml)
library(shiny)
library(intergraph)
library(GGally)
library(ggplot2)
library(sna)
shinyServer(function(input, output) {
path_to_file = reactive({
input$file$datapath
})
observeEvent(input$update, {
output$graph = renderPlot({
#reading SBML files
sbml_model = rsbml_read(path_to_file())
toycon_graph = igraph.from.graphNEL(rsbml_graph(rsbml_read(path_to_file())))
net = asNetwork(toycon_graph)
names = unlist(net$val)[seq(2, length(unlist(net$val)), 2)]
#Setting colors according to node class
colors = rep(isolate(input$color_metabolites), length(names))
colors[grep("R", names)] = isolate(input$color_reactions)
edges_names = names
#Setting names
for (i in seq(1, length(names))) {
if (any(names(sbml_model@model@species) == as.character(names[i]))) {
metabolite_name = sbml_model@model@species[[which(names(sbml_model@model@species) == as.character(names[i]))]]@name
compartment = sbml_model@model@species[[which(names(sbml_model@model@species) == as.character(names[i]))]]@compartment
metabolite = paste(metabolite_name, compartment, sep = "_")
edges_names[i] = metabolite
}
else{
if (any(names(sbml_model@model@reactions) == as.character(names[i]))) {
reaction_name = sbml_model@model@reactions[[which(names(sbml_model@model@reactions) == as.character(names[i]))]]@name
edges_names[i] = reaction_name
}
else{
edges_names[i] = "NoName"
}
}
}
if (isolate(input$weighting) == "none") {
edgesize = 0.25
}
#Weighting edges
else{
weights_edges = rep(0,length(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))
if (isolate(input$weighting) == "w") {
for (i in seq(1, length(net$mel))) {
weights_edges = append(weights_edges, net$mel[[i]][[3]][[2]])
}
edgesize = weights_edges
edgesize = log10(weights_edges) + 0.25
}
if (isolate(input$weighting) == "gimme"){
system("bash gimme_wrapper.sh")
fluxes = read.csv("gimme_fluxes.csv",header = F, stringsAsFactors = F)
reactions_names = as.vector(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))])
for (i in seq(1,dim(fluxes)[1],1)){
weights_edges[i] = fluxes[which(fluxes[,1] == reactions_names[i]),2]
}
edgesize = weights_edges
#edgesize = log10(weights_edges) + 0.25
}
}
#Plotting graph
ggnet2(
net,
label = edges_names,
arrow.gap = 0.035,
arrow.size = 8,
layout.exp = 0.1,
color = colors,
edge.size = edgesize
)
})
})
})
reactions_names = as.vector(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))])
reactions_names
as.vector(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]
)
[which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]
which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")
)
which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]
)
)
which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))
as.vector(unlist(net$val)
)
as.vector(unlist(net$val))
as.vector(unlist(net$val)) == reactions_names[i]
which(as.vector(unlist(net$val)) == reactions_names[i])
which(as.vector(unlist(net$val)) == reactions_names[1])
which(as.vector(unlist(net$val)) == reactions_names[2])
which(as.vector(unlist(net$val)) == reactions_names[3])
ystem("bash gimme_wrapper.sh")
fluxes = read.csv("gimme_fluxes.csv",header = F, stringsAsFactors = F)
reactions_names = as.vector(unlist(net$val)[which(names(unlist(net$val))=="vertex.names")][which(grepl("^R",unlist(net$val)[which(names(unlist(net$val))=="vertex.names")]))])
for (i in seq(1,dim(fluxes)[1],1)){
weights_edges[which(as.vector(unlist(net$val)) == reactions_names[i])] = fluxes[which(fluxes[,1] == reactions_names[i]),2]
}
edgesize = weights_edges
edgesize
