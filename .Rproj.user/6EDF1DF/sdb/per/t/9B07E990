{
    "collab_server" : "",
    "contents" : "######## Read and save the toycon1 model from TSV files ########\n# This section only needs to be run once  \n# Download packages necessary for this analysis\nsource(\"http://bioconductor.org/biocLite.R\")\n# sybil: necessary to run FVA and FBA on metabolic models\nbiocLite(\"sybil\")\n# glpkAPI: necessary to run GLPK-based optimization in the sybil package\nbiocLite(\"glpkAPI\")\n# dplyr: useful for manipulating dataframe\nbiocLite(\"dplyr\")\n# reshape2: useful for reshaping data frames and matrices\nbiocLite(\"reshape2\")\n\n######## Load packages ########\nlibrary(reshape2)\nlibrary(dplyr)\nlibrary(sybil)\nlibrary(glpkAPI)\n\n# Read in the sybil version of toycon1 (takes a minute or two)\n# read in model in tabular form\ntoycon1 = readTSVmod(prefix = \"toycon1_edit\", \"tsv\", balanceReact = F, def_bnd = 1000)\n\n\nmodel.metabolite.info = data_frame(\n  met_id = toycon1@met_id,\n  met_name = toycon1@met_name)\n# Check out metabolites in the model\nView(model.metabolite.info)\n\nmodel.reaction.info = data_frame(\n  react_id = toycon1@react_id,\n  react_name = toycon1@react_name,\n  react_objective = toycon1@obj_coef)\n# Check out reactions in the model\nView(model.reaction.info)\n\n# Save the sybil model as a file to avoid re-loading model.\nsaveRDS(toycon1,\"toycon1.rda\")\n\n#!!!!!!!!!!!!!!!!!!! Start here if you have already run the previous section !!!!!!!!!!!!!!!!!!!#\n\n######## Load toycon1 and necessary packages ########\n\n# Load packages\nlibrary(dplyr)\nlibrary(reshape2)\nlibrary(sybil)\nlibrary(glpkAPI)\n\n# Load the sybil model (saved from readTSVmod)\ntoycon1 = readRDS(\"toycon1.rda\")\n\n######## Get reaction info and make new reaction formula strings ########\n# This section may be difficult to understand without knowledge of the dplyr package\n# \"%>%\" means \"then...\", see dplyr package documentation\n\n# Reaction formulas are not represented in a sybil model except in the S-matrix\ntoycon1_s_matrix = as.matrix(toycon1@S)\nrownames(toycon1_s_matrix) = toycon1@met_id\ncolnames(toycon1_s_matrix) = toycon1@react_id\n\ntoycon1_rxn_decomposition = toycon1_s_matrix %>% \n  # transform the S matrix ( met x rxn matrix with coef as value ) \n  # to the long form of a reaction equation (one reaction represented as multiple rows)\n  melt %>% # then...\n  # rename default variables output by melt\n  transmute(met_id = as.character(Var1), rxn_id = as.character(Var2), coef = as.numeric(value)) %>% # then...\n  # remove all of the zero value coefficients from the S matrix\n  filter(coef != 0) %>% # then...\n  # extract compartment and (compartmentless) metabolic compound ids\n  # from the met_id which is in the form: \"m[compound_id_number][compartment_abbreviation]\"\n  mutate(met_compartment = gsub(\"m[0-9]+\",\"\",met_id), \n         met_compound = gsub(\"[a-z]$\",\"\",met_id)) %>% as.tbl %>%\n  # pair met_id with the cpd_name from the original model\n  left_join(data_frame(met_id = toycon1@met_id, cpd_name = toycon1@met_name)) %>%\n  # new compound name includes compartment of metabolite\n  mutate(met_name = paste0(cpd_name, \"[\",met_compartment,\"]\"))\n\n# create the S matrix by replacing row and column names with metabolite (full name with compartment) and reaction names\ntoycon1@S %>% as.matrix %>% \n  # extract only the compartment ID from the met_id\n  data.frame(row.names = paste0(toycon1@met_name, \"[\",gsub(\".*([a-z])$\",\"\\\\1\",toycon1@met_id),\"]\")) %>% \n  # change the names of the columns\n  setNames(toycon1@react_name) %>% \n  # save the table\n  write.table(\"toycon1_smatrix_name.txt\",quote = F,sep = \"\\t\",row.names = T,col.names = T)\n\n# create the S matrix by replacing row and column names with metabolite IDs and reaction IDs\ntoycon1@S %>% as.matrix %>% data.frame(row.names = toycon1@met_id) %>% setNames(toycon1@react_id) %>% \n  write.table(\"toycon1_smatrix_id.txt\",quote = F,sep = \"\\t\",row.names = T,col.names = T)\n\n\n# display the first few rows:\ntoycon1_rxn_decomposition  %>% head\n\n# create new rxn formulas given the reaction matrix decomposition\ntoycon1_rxn_info = toycon1_rxn_decomposition %>% \n  # annotate metabolite names from toycon1 sybil model (by joining tables)\n  left_join(data_frame(met_id = toycon1@met_id,met_abbrev = toycon1@met_name),by=\"met_id\") %>%\n  mutate(\n    #cpd_base = ef_met_compound(met_id),\n    # metabolites will be displayed by their name + compartment\n    met_base = paste0(cpd_name,\"[\",met_compartment,\"]\"),\n    # define metabolites as either substrates (left side of reaction) or products (right side of reaction)\n    met_substrates = coef<0,met_products = coef>0,\n    # append stoichiometric coefficients to metabolites when coef != 1\n    coef_base = ifelse(abs(coef) == 1,\"\",paste0(as.character(abs(coef)),\" \")),\n    met_coef_base = paste0(coef_base,met_base)) %>% \n  # group by each reaction then paste together each side of the reaction equation (substrates, products)\n  group_by(rxn_id) %>% summarize(\n    base_substrates = paste(met_coef_base[met_substrates],collapse = \" + \"),\n    base_products = paste(met_coef_base[met_products],collapse = \" + \")) %>% ungroup %>%\n  # annotate reactions by their lower and upper bounds to determine directionality of the arrow\n  inner_join(data_frame(rxn_id = toycon1@react_id,\n                        rxn_name = toycon1@react_name,\n                        lb = toycon1@lowbnd,\n                        ub = toycon1@uppbnd) %>%\n               mutate(base_arrow = ifelse(lb < 0,\" <==> \",\" --> \")), by=\"rxn_id\") %>%\n  # paste together substrates and products by the reaction arrow to generate fresh reaction formulas\n  mutate(base_substrates = ifelse(is.na(base_substrates),\" \",base_substrates),\n         base_products = ifelse(is.na(base_products),\" \",base_products),\n         rxn_formula = paste0(base_substrates,base_arrow,base_products)) %>% \n  # remove temporary variables (start with base_)\n  select(-base_substrates,-base_products,-base_arrow)\n\n# display the first few rows:\ntoycon1_rxn_info %>% head \n\n#### Run flux balance analysis on the default model ####\n\n# perform FBA on the model as loaded (same parameters as cobra model I had sent in November 2014)\n# the Default model's objective is to maximize ATP hydrolysis:\ntoycon1_rxn_info %>% \n  filter(rxn_id %in% toycon1@react_id[toycon1@obj_coef > 0]) %>% select(rxn_id,rxn_formula)\n# In Ratcon1, RCR11017: ATP[c] + H20[c] --> ADP[c] + Pi[c]\n# This reaction simulates the consumption of ATP for energy-dependent\n# processes such as active transporter or actin-myosin contraction\n\n\n# FIGURE: colored stoichiometric matrix\nlibrary(ggplot2)\nplot.smatrix = toycon1_rxn_decomposition %>% \n  left_join(toycon1_rxn_info) %>% \n  mutate(met_name = factor(met_name, levels = rev(unique(met_name)), ordered = T)) %>% \n  arrange(grepl(\"E\",rxn_id), rxn_id) %>% mutate(rxn_name = factor(rxn_name, levels = unique(rxn_name), ordered = T)) %>% \n  # group_by(rxn_id) %>% mutate(value = coef / mean(abs(coef))) %>% ungroup %>% \n  ggplot(aes(x = rxn_name, y = met_name, fill = sign(coef), label = coef)) + \n  geom_tile() + \n  geom_text(size = 2, color = \"#FFFFFF\") + \n  scale_fill_gradient2(low = \"#4F81BD\", mid = \"#FFFFFF\", high = \"#C0504D\") + \n  theme_minimal(base_size = 12) + theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = \"none\") + \n  xlab(NULL) + ylab(NULL) \n\n\nplot.smatrix\nggsave(filename = \"toycon1_smatrix.pdf\",plot.smatrix,width = 2.6, height = 3)\n\n# function to run FVA with inputs of a required percentage, model, and table to add results to\nef_tbl_fva = function(x.pct,x.model,x.tbl) {\n  x.fva = fluxVar(x.model,percentage = x.pct,fixObjVal = T)\n  x.result = lp_obj(x.fva) %>% round(9) \n  x.n = length(x.result)\n  data_frame(rxn_id = x.fva@react@react_id,\n             # fluxVar returns one vector with first half containing lb and second half containing ub\n             fva_lb = x.result[1:(x.n/2)],\n             fva_ub = x.result[(x.n/2+1):(x.n)]) %>% left_join(x.tbl) %>%\n    mutate(fva_pct = x.pct,\n           fva_req = fva_lb > 1e-9 | fva_ub < -1e-9,\n           fva_on = abs(fva_lb) > 1e-9 | abs(fva_ub) > 1e-9) %>% as.tbl\n}\n\n\n# Run FVA while requiring 0-100% of the maximum ATP yield (increments of 5%)\nfva.pct.result = lapply(c(0:20)*5,ef_tbl_fva,toycon1,toycon1_rxn_info) %>% bind_rows\n# Display FVA results table\nfva.pct.result %>% arrange(rxn_id)\n# Write FVA results to a text file\nfva.pct.result %>% write.table(\"toycon1_fva_result_percentage.txt\", sep = \"\\t\", quote = F, row.names = F)\n\n# Prepare FVA results for plotting so that each lb or ub value \n# is represent in a different row (see reshape2::melt documentation)\nfva.pct.data = bind_rows(list(\n  fva.pct.result %>% select(rxn_id,rxn_name,fva_pct,fva_req,fva_on,lb = fva_lb,ub = fva_ub) %>%\n    mutate(ub = ifelse(fva_on,ub,0.00001),smaller = ifelse(abs(lb)<abs(ub),\"lb\",\"ub\")) %>% \n    melt(c(\"rxn_id\",\"rxn_name\",\"fva_pct\",\"smaller\",\"fva_req\",\"fva_on\")) %>% as.tbl %>% \n    mutate(lrg_bnd = ifelse(smaller == variable,\"s\",\"c\"),bnd = \"fva\")))\n\n# Plot FVA results of lower and upper bound ranges showing the tradeoff\n# between the \"glycolysis\" and \"respiration\" reaction pathways\nfva.pct.plot = fva.pct.data %>% filter(rxn_id %in% c(\"R1\",\"R2\")) %>% \n  mutate(color = ifelse(fva_req, \"#C0504D\", ifelse(fva_on, \"#7F7F7F\", \"#4F81BD\"))) %>%\n  mutate(shape = ifelse(smaller == variable, 15, 18)) %>% \n  ggplot(aes(x = value, y = fva_pct, group = factor(fva_pct), color = color)) + \n  geom_line() + geom_vline(linetype = \"solid\",size = 1,xintercept =0) +\n  # geom_point(size = 5,aes(shape = factor(lrg_bnd, levels= c(\"s\", \"c\", \"t\")))) +\n  geom_point(size = 3,aes(shape = shape)) +\n  scale_shape_identity() + #(values = c(\"circle\",\"square\")) + \n  scale_color_identity() + \n  scale_x_continuous(breaks = c(0:10) / 5) + \n  scale_y_continuous(breaks = c(0:20)*5) + \n  theme_minimal(base_size = 16) + \n  facet_wrap(\"rxn_name\") +\n  theme(legend.position = \"none\") + xlab(\"Units of Flux through Reaction\") + ylab(\"Required Flux through Obj Fun\")\n\nfva.pct.plot\nggsave(filename = \"toycon1_fva_percentage.pdf\",fva.pct.plot,width = 6, height = 3.5)\n\n# Do the same as above except for increments of 1 ATP per step up to 32 (max)\nfva.increment.result = lapply(100 * c(0:16) / 16,ef_tbl_fva,toycon1,toycon1_rxn_info) %>% bind_rows\n# Write FVA results to a text file\nfva.increment.result %>% write.table(\"toycon1_fva_result_increment.txt\", sep = \"\\t\", quote = F, row.names = F)\n\nfva.increment.data = bind_rows(list(\n  fva.increment.result %>% select(rxn_id,rxn_name,fva_pct,fva_req,fva_on,lb = fva_lb,ub = fva_ub) %>%\n    mutate(ub = ifelse(fva_on,ub,0.00001),smaller = ifelse(abs(lb)<abs(ub),\"lb\",\"ub\")) %>% \n    melt(c(\"rxn_id\",\"rxn_name\",\"fva_pct\",\"smaller\",\"fva_req\",\"fva_on\")) %>% as.tbl %>% \n    mutate(lrg_bnd = ifelse(smaller == variable,\"s\",\"c\"),bnd = \"fva\")))\n\nfva.increment.plot = fva.increment.data %>% filter(rxn_id %in% c(\"R1\",\"R2\")) %>% \n  mutate(color = ifelse(fva_req, \"#C0504D\", ifelse(fva_on, \"#7F7F7F\", \"#4F81BD\"))) %>%\n  mutate(shape = ifelse(smaller == variable, 15, 18)) %>% \n  ggplot(aes(x = value, y = .32 * fva_pct, group = factor(fva_pct), color = color)) + \n  geom_line() + geom_vline(linetype = \"solid\",size = 1, xintercept = 0) +\n  geom_point(size = 3,aes(shape = shape)) +\n  scale_shape_identity() + \n  scale_color_identity() + \n  scale_x_continuous(breaks = c(0:10) / 5) + \n  scale_y_continuous(breaks = 2 * c(0:16)) + \n  theme_minimal(base_size = 12) + \n  facet_wrap(\"rxn_name\") +\n  theme(legend.position = \"none\") + xlab(\"Units of flux through reaction\") + ylab(\"Required number of ATP produced\")\n\nfva.increment.plot\nggsave(filename = \"toycon1_fva_increment.pdf\",fva.increment.plot,width = 5, height = 3)\n\n# Plot the results for every reaction in the network\nfva.increment.plot.all = fva.increment.data %>% #filter(rxn_id %in% c(\"E1\",\"E3\")) %>% #,!grepl(\"E\", rxn_id)) %>%\n  mutate(color = ifelse(fva_req, \"#C0504D\", ifelse(fva_on, \"#7F7F7F\", \"#4F81BD\"))) %>%\n  mutate(shape = ifelse(smaller == variable, 15, 18)) %>% \n  # filter(fva_pct < 20) %>%\n  ggplot(aes(x = value, y = .32 * fva_pct, group = factor(fva_pct), color = color)) + \n  geom_line() + geom_vline(linetype = \"solid\",size = 1, xintercept = 0) +\n  # geom_point(size = 5,aes(shape = factor(lrg_bnd, levels= c(\"s\", \"c\", \"t\")))) +\n  geom_point(size = 3,aes(shape = shape)) +\n  scale_shape_identity() + #(values = c(\"circle\",\"square\")) + \n  scale_color_identity() + \n  # scale_x_continuous(breaks = -(12:0)/.5) + \n  scale_y_continuous(breaks = 2 * c(0:16)) + \n  theme_minimal(base_size = 12) + \n  facet_wrap(\"rxn_name\", scales = \"free_x\") +\n  theme(legend.position = \"none\") + xlab(NULL) + ylab(NULL)\n\nfva.increment.plot.all\nggsave(filename = \"toycon1_fva_increment_all.pdf\",fva.increment.plot.all,width = 10, height = 6)\n\n\n#### Perform single gene deletions for all gene-associated reactions ####\n# Toycon1 includes representative genes for several simplified reactions\n# Note that exchange reactions do not typically have gene associations\n# as we used here to keep things minimal.\n\ngene.ko = toycon1 %>% geneDeletion()\n# delete every gene and record new FBA value\ngene.ko.fba = gene.ko %>% fluxdels %>% setNames(gene.ko@dels) %>% sapply(function(x) {\n  (toycon1 %>% rmReact(x) %>% optimizeProb(\"fba\",retOptSol = F))$obj\n})\n\ntbl.ko = data_frame(gene_id = names(gene.ko.fba),gene_ko_atp = gene.ko.fba) %>% left_join(\n  data_frame(gene_id = gene.ko@dels[,1],gene_rxn_ko = gene.ko@fluxdels %>% \n               lapply(unlist) %>% lapply(unique) %>% lapply(paste0,collapse = \";\") %>% sapply(c))) %>% \n  left_join(gene.ko %>% fluxdels %>% setNames(gene.ko@dels) %>% melt %>% transmute(rxn_id = as.character(value), gene_id = L1)) %>%\n  left_join(toycon1_rxn_info)\n\nView(tbl.ko)\n\n# write table which includes FBA values for knockout with reaction information\ntbl.ko %>% write.table(\"toycon1_gene_knockout_screen\", sep = \"\\t\", quote = F, row.names = F)\n\n# perform double knockouts\ngene.ko2 = toycon1 %>% geneDeletion(combinations = 2)\n# run the FBA simulation for each pair of gene knockouts\ngene.ko2.fba = gene.ko2 %>% fluxdels %>% setNames(gene.ko2@dels %>% apply(1,paste0,collapse = \"_\")) %>% sapply(function(x) {\n  (toycon1 %>% rmReact(x) %>% optimizeProb(\"fba\",retOptSol = F))$obj\n})\n\n# summarize the genes and reactions removed in a table\ngene.ko2.rxns = gene.ko2@fluxdels %>% \n  setNames(names(gene.ko2.fba)) %>% melt %>% \n  transmute(rxn_id = as.character(value), genes = L1) %>%\n  left_join(toycon1_rxn_info) %>% group_by(genes) %>% \n  summarize(rxn1 = first(rxn_id), rxn2 = last(rxn_id), \n            name1 = first(rxn_name), name2 = last(rxn_name), \n            rxns = paste0(rxn_id, collapse = \"_\"), \n            names = paste0(rxn_name, collapse = \" / \")) %>% ungroup\n\n\ntbl.ko2 = data_frame(genes = names(gene.ko2.fba),atp = gene.ko2.fba) %>% \n  left_join(gene.ko2.rxns) %>%\n  # insert the ATP values for individual gene KOs\n  left_join(tbl.ko %>% select(rxn1 = rxn_id, atp1 = gene_ko_atp)) %>%\n  left_join(tbl.ko %>% select(rxn2 = rxn_id, atp2 = gene_ko_atp)) %>%\n  mutate(atp12 = atp)\ntbl.ko2 %>% filter(atp12 < atp1, atp12 < atp2) %>% View\n\n# To add: exchange reaction space sampling. Running EFmin (like pfba)",
    "created" : 1505150145749.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2833016543",
    "id" : "9B07E990",
    "lastKnownWriteTime" : 1504560544,
    "last_content_update" : 1504560544,
    "path" : "~/Uczelnia/UVA/toycon/toycon1_demo_BonnieNotes.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}